@page "/simulation"

@inherits FluxorComponent

@using System.Text;
@using System.Text.Json;
@using BlazorLeaflet
@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.Traces.ScatterLib
@using UserInterface.Data;
@using UserInterface.Store;
@using UserInterface.Components;

@inject IDispatcher Dispatcher
@inject IState<ScenarioDataState> ScenarioDataState
@inject IState<TimeSeriesGraphState> TimeSeriesGraphState
@inject IJSRuntime JSRuntime

<PageTitle>spa - energy network scenario simulation</PageTitle>

<h1>Scenario Simulation</h1>

@if (ScenarioDataState.Value.Initialized && ScenarioDataState.Value.SelectedScenario != null)
{
    <MudGrid>
    <MudItem xs="4">
            <DateTimePicker @ref="_startDateTime" Label="Start date" LabelTime="Start time" ValueChanged="StartTimeChanged" Required="true" />
    </MudItem>

    <MudItem xs="4">
            <MudTextField @bind-Value="CurrentTime" Label="Current time" ReadOnly="true" />
    </MudItem>

    <MudItem xs="4">
            <DateTimePicker @ref="_endDateTime" Label="End date" LabelTime="End time" ValueChanged="EndTimeChanged" Required="true" />
    </MudItem>
    </MudGrid>

    <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
        <MudIconButton Icon="@Icons.Material.Outlined.NotStarted" OnClick="SimulationStepClicked" Disabled="!ScenarioDataState.Value.StartEndDateValid"></MudIconButton>
        <MudIconButton Icon="@Icons.Material.Outlined.PlayCircle" OnClick="SimulationRunClicked" Disabled="true"></MudIconButton>
        <MudIconButton Icon="@Icons.Material.Outlined.PauseCircle" OnClick="SimulationPauseClicked" Disabled="true"></MudIconButton>
        <MudIconButton Icon="@Icons.Material.Outlined.ChangeCircle" OnClick="SimulationResetClicked" Disabled="true"></MudIconButton>
    </MudButtonGroup>

    <MudGrid>
        <MudItem xs="12">
            <PlotlyChart style="height: 60vh; min-height: 350px" @bind-Config="config" @bind-Layout="layout" @bind-Data="timeSeriesData" @ref="chart" />
        </MudItem>
        <MudItem xs="9">
            <PowerFlowMap ScenarioData="@ScenarioDataState.Value.SelectedScenario" PowerFlow="@ScenarioDataState.Value.PowerFlows?.Values?.LastOrDefault()" />
        </MudItem>
        <MudItem xs="3">
            <PowerFlowResult ScenarioData="@ScenarioDataState.Value.SelectedScenario" PowerFlow="@ScenarioDataState.Value.PowerFlows?.Values?.LastOrDefault()" />
        </MudItem>
    </MudGrid>
}else
{
    <MudText>No scenario available for simulation.</MudText>
}

@code {

    DateTimePicker _startDateTime;
    DateTimePicker _endDateTime;
    // Chart specific fields
    PlotlyChart chart;
    Config config = new Config();
    Layout layout = new Layout();
    IList<ITrace> timeSeriesData; 

    string CurrentTime { 
        get
        {
            return ScenarioDataState.Value.CurrentDateTimeOffset.ToLocalTime().ToString();
        }
        set {}
    }

    private void StartTimeChanged(DateTimeOffset dateTimeOffset)
    {
        Console.WriteLine($"Start time={dateTimeOffset}, value={_startDateTime.Value}");
        Dispatcher.Dispatch(new SimulationSetStartDateTimeOffsetAction(dateTimeOffset));
    }

    private void EndTimeChanged(DateTimeOffset dateTimeOffset)
    {
        Console.WriteLine($"End time={dateTimeOffset}, value={_endDateTime.Value}");
        Dispatcher.Dispatch(new SimulationSetEndDateTimeOffsetAction(dateTimeOffset));
    }

    private void SimulationStepClicked()
    {
        Console.WriteLine("Simulation step clicked");
        Dispatcher.Dispatch(new SimulationSingleStepAction2(ScenarioDataState.Value.CurrentDateTimeOffset, chart));
    }

    private void SimulationRunClicked()
    {
        Console.WriteLine("Simulation run clicked");
    }

    private void SimulationPauseClicked()
    {
        Console.WriteLine("Simulation pause clicked");
    }

    private void SimulationResetClicked()
    {
        Console.WriteLine("Simulation reset clicked");
    }
}
