@page "/dataview"

@inherits FluxorComponent

@using System.Text;
@using BlazorLeaflet;
@using BlazorLeaflet.Models
@using BlazorLeaflet.Models.Events
@using System.Drawing;
@using UserInterface.Data;
@using UserInterface.Store;
@using UserInterface.Components;

@inject IDispatcher Dispatcher
@inject IState<ScenarioDataState> ScenarioDataState
@inject IJSRuntime jsRuntime

<PageTitle>spa - energy network scenario viewer</PageTitle>

<h1>Scenario Viewer</h1>

@if (ScenarioDataState.Value.Initialized)
{
    <MudText>Select scenario</MudText>    
    <MudSelect T="ScenarioModelJson" @bind-Value="selectedScenario" ToStringFunc="@converter" Label="Scenario"  AnchorOrigin="Origin.BottomCenter">

        @foreach (var element in ScenarioDataState.Value.ScenarioData.ConfigJsonData.Values)
        {
            <MudSelectItem Value="@element" />
        }
    </MudSelect>

    @if (ScenarioDataState.Value.SelectedScenario != null)
    {
        <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" Disabled="false" OnClick="DeployScenario">Deploy</MudButton>
    }else
    {
        <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" Disabled="true">Deploy</MudButton>
    }

    @if (ScenarioDataState.Value.SelectedScenario != null)
    {
        <MudExpansionPanels MultiExpansion="true">
            <MudExpansionPanel Text="Map">
                @* <div id="mapContainer" style="width: 800px; height: 400px;"> *@
                    <PowerFlowMap ScenarioData="@selectedScenario"/>
                @* </div> *@
            </MudExpansionPanel>
            <MudExpansionPanel Text="Entities">
                <MudTable Items="@ScenarioDataState.Value.SelectedScenario.Scenario.Consumers">
                    <HeaderContent>
                        <MudTh>Name</MudTh>
                        <MudTh>Profile</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Name">@context.Name</MudTd>
                        <MudTd DataLabel="Profile">@context.ProfileIdentifier</MudTd>
                    </RowTemplate>
                </MudTable>

                <MudTable Items="@ScenarioDataState.Value.SelectedScenario.Scenario.Generators">
                    <HeaderContent>
                        <MudTh>Name</MudTh>
                        <MudTh>Profile</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Name">@context.Name</MudTd>
                        <MudTd DataLabel="Profile">@context.ProfileIdentifier</MudTd>
                    </RowTemplate>
                </MudTable>
                <MudTable Items="@ScenarioDataState.Value.SelectedScenario.Scenario.Storages">
                    <HeaderContent>
                        <MudTh>Name</MudTh>
                        <MudTh>Profile</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Name">@context.Name</MudTd>
                        <MudTd DataLabel="Profile">NA</MudTd>
                    </RowTemplate>
                </MudTable>
            </MudExpansionPanel>
            
            <MudExpansionPanel Text="Models">
                <MudTable Items="@ScenarioDataState.Value.ScenarioData.Models.Keys">
                    <HeaderContent>
                        <MudTh>Name</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Name">@context</MudTd>
                    </RowTemplate>
                </MudTable>
            </MudExpansionPanel>

        </MudExpansionPanels>
    }
}else
{
    <MudText>No data available.</MudText>
}

@code {
    Func<ScenarioModelJson, string> converter = p => p?.Scenario.Name;
    private Map _map;
    private ScenarioModelJson selectedScenario
    {
        get
        {
            return ScenarioDataState.Value.SelectedScenario;
        }

        set
        {
            if (value != null)
            {
                Dispatcher.Dispatch(new ScenarioDataSetSelectedScenarioAction(value));
            }
        }
    }

    async Task DeployScenario()
    {
        Dispatcher.Dispatch(new DeploySelectedScenarioAction());
    }
}
